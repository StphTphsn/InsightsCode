function output = sorted_rasters(dbaseOrHandle, varargin)
%SORTED_RASTERS Plot raster using electro_gui's sorted raster macro
%
%**************************************************************************
%* NOTE: It is NOT RECOMMENDED to use this function from the command line *
%**************************************************************************
%* There are many parameters for this function and it is easy to make a   *
%* mistake when specifying the parameter values manually.                 *
%*                                                                        *
%* The best way to use this function is to automatically generate code    *
%* inside the egm_Sorted_rasters GUI. Run egm_Sorted_rasters.m and make   *
%* the raster you want and then click the 'Matlab export' button and      *
%* choose 'Code'. This will create a snippet of code that recreates the   *
%* raster using calls to SORTED_RASTERS.                                  *
%**************************************************************************
%
%Usage:
%    OUTPUT = SORTED_RASTERS(DBASE, PARAMS)
%    OUTPUT = SORTED_RASTERS(H, PARAMS)
%    OUTPUT = SORTED_RASTERS(H, 'Name1', 'Value1', ...)
%    OUTPUT = SORTED_RASTERS(DBASE, 'Name1', 'Value1', ...)
%
%OUTPUT is controlled by the 'Output' parameter. If the output parameter is
%'raster', OUTPUT is a handle to a figure containing the raster and
%histograms. In this case, SORTED_RASTERS closes the egm_Sorted_rasters gui
%when finished. If the output parameter is 'gui', OUTPUT is a handle to the
%egm_Sorted_rasters gui itself, which is left open after SORTED_RASTERS is
%finished.
%
%DBASE is a dbase struct generated by electro_gui.
%
%H is a handle to the egm_Sorted_rasters figure. If this handle is passed
%instead of a dbase, SORTED_RASTERS assumes a dbase is already loaded and
%makes the raster in the gui referenced by H. This syntax is necessary for
%making multiple overlayed rasters.
%
%PARAMS is a struct containing the raster parameters. The best way to
%generate this struct is through the EGM_SORTED_RASTERS GUI. Make the
%raster you want, then click on the 'Matlab export' button and choose
%'Code'. This saves the PARAMS to file and creates a code snippet to call
%SORTED_RASTERS with those parameters. For a full list of parameters, type
%help sortedRastersParameters
%
%'Name1', 'Value1' are parameter name-value pairs that can be passed
%instead of the PARAMS struct.
%
%See also: SORTEDRASTERPARAMETERS

%==========================================================================
%The following features of egm_Sorted_rasters.m are NOT implemented in this
%function:
%    Time warping - because no one knows how to use it
%    Selected files only - because depends on having electro_gui open
%    Continuous function - because depends on having electro_gui open
%    Deleting events - beacuse this is only useful in interactive mode
%    Select triggers button - because no one knows what it does
%    PPT export - because it doesn't work on my computer
%    Auto color by label
%


%%%TODO
% Export to MATLAB (triginfo)
% When hold is on, can still change disabled controls. This is dangerous.
% In 'Raster' panel: Trial height, Trial height units, Time limits, Y axis


%% Create sorted rasters figure if not passed a handle to it
% If we are passed a handle, assume it already has the dbase loaded
if ishandle(dbaseOrHandle)
    h = dbaseOrHandle;
else % assume it is a dbase
    dbase = dbaseOrHandle;
    [~, h] = egm_Sorted_rasters;
    
    % Load dbase
    handles = guidata(h);
    egm_Sorted_rasters('push_Open_Callback', ...
        handles.push_Open, [], handles, dbase);
end

%% Parse parameters

p = inputParser;

% Output of this function
addParameter(p, 'Output', 'gui') 
% if 'raster', only the raster is returned and the gui is closed
% if anything else, the gui is left open and a handle to the gui figure is
% returned


% Create other parameters by getting current values from egm_Sorted_rasters
params = getSortedRasterParameters(h);
names = fieldnames(params);
for ii = 1:length(names)
    addParameter(p, names{ii}, params.(names{ii}))
end
% If you want to add a parameter, you can just add it in
% getSortedRasterParameters() and it will be automatically added here! Of
% course, you still need to add some code below to apply the parameter to
% the GUI.

parse(p, varargin{:})
r = p.Results;

%% Set things
setHold(h, r.Hold)

setFileRange(h, r.FileRange)
setTriggerSource(h, r.TriggerSource)
setEventSource(h, r.EventSource)
setTriggerType(h, r.TriggerType)
setEventType(h, r.EventType)

% Trigger source options 
setSourceOption(h, 'trigger', 'includeSyllList', r.TriggerSyllIncluded)
setSourceOption(h, 'trigger', 'ignoreSyllList',  r.TriggerSyllExcluded)
setSourceOption(h, 'trigger', 'motifSequences',  r.TriggerMotifSequence)
setSourceOption(h, 'trigger', 'motifInterval',   r.TriggerMotifMaxGap)
setSourceOption(h, 'trigger', 'boutInterval',    r.TriggerBoutInterval)
setSourceOption(h, 'trigger', 'boutMinDuration', r.TriggerBoutMinDuration)
setSourceOption(h, 'trigger', 'boutMinSyllables',r.TriggerBoutMinSyllCount)
setSourceOption(h, 'trigger', 'burstFrequency',  r.TriggerBurstMinFreq)
setSourceOption(h, 'trigger', 'burstMinSpikes',  r.TriggerBurstMinCount)
setSourceOption(h, 'trigger', 'pauseMinDuration',r.TriggerPauseMinDuration)

% Event source options
setSourceOption(h, 'event', 'includeSyllList', r.EventSyllIncluded)
setSourceOption(h, 'event', 'ignoreSyllList',  r.EventSyllExcluded)
setSourceOption(h, 'event', 'motifSequences',  r.EventMotifSequence)
setSourceOption(h, 'event', 'motifInterval',   r.EventMotifMaxGap)
setSourceOption(h, 'event', 'boutInterval',    r.EventBoutInterval)
setSourceOption(h, 'event', 'boutMinDuration', r.EventBoutMinDuration)
setSourceOption(h, 'event', 'boutMinSyllables',r.EventBoutMinSyllCount)
setSourceOption(h, 'event', 'burstFrequency',  r.EventBurstMinFreq)
setSourceOption(h, 'event', 'burstMinSpikes',  r.EventBurstMinCount)
setSourceOption(h, 'event', 'pauseMinDuration',r.EventPauseMinDuration)


setAlignment(h, r.Alignment)

% Filtering
setFiltering(h, 'Trigger duration',        r.FilterByTriggerDuration)
setFiltering(h, 'Previous trigger onset',  r.FilterByPrevTriggerOnset)
setFiltering(h, 'Previous trigger offset', r.FilterByPrevTriggerOffset)
setFiltering(h, 'Next trigger onset',      r.FilterByNextTriggerOnset)
setFiltering(h, 'Next trigger offset',     r.FilterByNextTriggerOffset)
setFiltering(h, 'Preceding event onset',   r.FilterByPrevEventOnset)
setFiltering(h, 'Preceding event offset',  r.FilterByPrevEventOffset)
setFiltering(h, 'Following event onset',   r.FilterByNextEventOnset)
setFiltering(h, 'Following event offset',  r.FilterByNextEventOffset)
setFiltering(h, 'First event onset',       r.FilterByFirstEventOnset)
setFiltering(h, 'First event offset',      r.FilterByFirstEventOffset)
setFiltering(h, 'Last event onset',        r.FilterByLastEventOnset)
setFiltering(h, 'Last event offset',       r.FilterByLastEventOffset)
setFiltering(h, 'Number of events',        r.FilterByNumberOfEvents)
setFiltering(h, 'Is in event',             r.FilterByIsInEvent)

setBackgroundColor(h, r.BackgroundColor)
setSkipSorting(h, r.SkipSorting)
setLockLimitsToTrigger(h, r.LockLimitsToTrigger)
setExcludePartialWindows(h, r.ExcludePartialWindows)
setExcludePartialEvents(h, r.ExcludePartialEvents)
setWindowLimits(h, r.WindowLimits)
setStartReference(h, r.StartReference)
setStopReference(h, r.StopReference)

% Exporting
setExportHeightUnits(h, r.ExportHeightUnits)
setExportWidthUnits(h, r.ExportWidthUnits)
setExportPSTHHeight(h, r.ExportPSTHHeight)
setExportHistHeight(h, r.ExportHistHeight)
setExportInterval(h, r.ExportInterval)
setExportResolution(h, r.ExportResolution)
setExportWidth(h, r.ExportWidth)
setExportHeight(h, r.ExportHeight)

% Sorting
setPrimarySortBy(h, r.PrimarySortBy)
setPrimarySortDirection(h, r.PrimarySortDirection)
setPrimarySortGroupLabels(h, r.PrimarySortGroupLabels)
setSecondarySortBy(h, r.SecondarySortBy)
setSecondarySortDirection(h, r.SecondarySortDirection)

% Raster
for ii = 1:length(r.RasterElements)
    setRasterElement(h, r.RasterElements(ii))
end
setRasterXLim(h, r.RasterXLim)
setRasterXLimAuto(h, r.RasterXLimAuto) 
% It is important for setRasterXLimAuto to come AFTER setRasterXLim because
% setRasterXLim automatically unchecks the checkbox that is controlled by
% setRasterXLimAuto.
setRasterTrialHeight(h, r.RasterTrialHeight, r.RasterTrialHeightUnits)
setRasterTrialOverlap(h, r.RasterTrialOverlap)
setRasterInchesPerSec(h, r.RasterInchesPerSec)
setRasterYAxis(h, r.RasterYAxis)

% PSTH
setHistShow(      h, 'psth', r.PsthShow)
setHistBinSize(   h, 'psth', r.PsthBinSize)
setHistSmoothing( h, 'psth', r.PsthSmoothing)
setHistYUnits(    h, 'psth', r.PsthYUnits)
setHistYLim(      h, 'psth', r.PsthYLim)
setHistCount(     h, 'psth', r.PsthCount)

% Vertical histogram
setHistShow(      h, 'vert', r.VerticalHistogramShow)
setHistBinSize(   h, 'vert', r.VerticalHistogramBinSize)
setHistSmoothing( h, 'vert', r.VerticalHistogramSmoothing)
setHistYUnits(    h, 'vert', r.VerticalHistogramYUnits)
setHistYLim(      h, 'vert', r.VerticalHistogramYLim)
setHistCount(     h, 'vert', r.VerticalHistogramCount)
setHistROI(       h, 'vert', r.VerticalHistogramROI)

setHistogramYLimMode(h, r.HistogramYLimMode)

%% GENERATE RASTER!
handles = guidata(h);
callbackIfEnabled('push_GenerateRaster_Callback', handles.push_GenerateRaster, [], handles)

%% Output
switch lower(r.Output)
    case 'raster'
        handles = guidata(h);
        fh = egm_Sorted_rasters('menu_ExportFigure_Callback', handles.menu_ExportFigure, [], handles);
        close(h)
        output = fh; % figure handle for just the raster
    otherwise
        output = h; % figure handle for the egm_Sorted_rasters GUI
end