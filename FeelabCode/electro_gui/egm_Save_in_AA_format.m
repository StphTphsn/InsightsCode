function handles = egm_Save_in_AA_format(handles)
% ElectroGui macro
% Saves data in a format compatible with Aaron Andalman's software.
% Generates two files -- one with spike and one with syllable data.
% Requires the exper.mat file generated by Aaron's daq software.
%
% If you want ElectroGui syllable labels to be convertable to Aaron's
% format, use digits 0-9 to label syllables. Syllables with all other
% labels will get a segType number of 103 (unknown). Unlabeled syllables
% get a segType number of -1.
%
% segmentationMethod(n).method string is 'ElectroGui'; other fields in
%    segmentationMethod contain parameters specific to ElectroGui.
%
% Not supported: bUnusable, bContainsStim, spike and noise Heights and
%    Widths (these fields are generated, but set to 0), featurePolygon, and
%    excludeWave (these fields are also generated, but empty).
%
% All other fields fully match Aaron's format.


[filename, pathname, filterindex] = uigetfile([handles.path_name '\exper.mat'], 'Choose the AA daq ''exper'' file');
if ~isstr(filename)
    return
end

load([pathname filename]);

answer = inputdlg({'Spikes file (leave empty to skip)','Syllables file (leave empty to skip)'},'Save data',1,{'spikes.mat','syllables.mat'});
if isempty(answer)
    return
end
spikesfile = answer{1};
syllablesfile = answer{2};

if length(spikesfile)>1
    cell.file = spikesfile;
    cell.path = pathname;
    cell.experfilename = [pathname filename];
    cell.birdname = exper.birdname;
    cell.expername = exper.expername;
    str = get(handles.popup_EventList,'string');
    if length(str)<2
        errordlg('No events to save!','Error');
        return
    end
    str = str(2:end);
    mn = [];
    for c = 1:length(str)
        mn = [mn ',''' str{c} ''''];
    end
    indx = eval(['menu(''Choose events to save as spikes''' mn ')']);
    str = str{indx};
    if strcmp(str(1:5),'Sound')
        chan = get_channel([handles.path_name '\' handles.sound_files(1).name]);
    else
        f = findstr(str,'-');
        f = f(1);
        num = str2num(str(9:f-2));
        chan = get_channel([handles.path_name '\' handles.chan_files{num}(1).name]);
    end
    cell.channel = chan;
    
    nums = [];
    for c = 1:length(handles.EventTimes);
        nums(c) = size(handles.EventTimes{c},1);
    end
    cs = cumsum(nums);
    f = length(find(cs<indx))+1;
    if f>1
        g = indx-cs(f-1);
    else
        g = indx;
    end
    
    for c = 1:length(handles.sound_files)
        cell.files(c).birdname = exper.birdname;
        cell.files(c).expername = exper.expername;
        cell.files(c).channel = cell.channel;
        cell.files(c).filenum = c;
        cell.files(c).bUnusable = 0;
        cell.files(c).bContainsStim = 0;
        
        spk = handles.EventTimes{f}{g,c};
        isin = handles.EventSelected{f}{g,c};
        
        cell.files(c).spikes = spk(find(isin==1))'/handles.fs;
        cell.files(c).noise = spk(find(isin==0))'/handles.fs;
        cell.files(c).spikeHeights = zeros(size(cell.files(c).spikes))';
        cell.files(c).spikeWidths = zeros(size(cell.files(c).spikes))';
        cell.files(c).noiseHeights = zeros(size(cell.files(c).noise))';
        cell.files(c).noiseWidths = zeros(size(cell.files(c).noise))';
        
        cell.files(c).spikeMethods.threshold.thres = handles.EventThresholds(f,c);
        cell.files(c).spikeMethods.threshold.bAbove = (handles.EventThresholds(f,c)>=0);
        cell.files(c).spikeMethods.featurePolygon = [];
        cell.files(c).spikeMethods.excludeWave = [];
        
        for d = 1:length(handles.Properties.Names{c})
            cell.files(c).(handles.Properties.Names{c}{d}) = handles.Properties.Values{c}{d};
        end
    end
    
    save([pathname spikesfile],'cell');
end


if length(syllablesfile)>1
    for c = 1:length(handles.sound_files)
        keys{c} = handles.sound_files(c).name;
        
        elements{c}.exper = exper;
        elements{c}.filenum = c;

        sg = handles.SegmentTimes{c}(find(handles.SegmentSelection{c}==1),:);
        tt = handles.SegmentTitles{c}(find(handles.SegmentSelection{c}==1));
        
        if isempty(sg)
            sg = zeros(0,2);
        end

        elements{c}.segAbsStartTimes = handles.DatesAndTimes(c) + sg(:,1)'/handles.fs/60/60/24;
        elements{c}.segFileStartTimes = sg(:,1)'/handles.fs;
        elements{c}.segFileEndTimes = sg(:,2)'/handles.fs;
        tp = [];
        for d = 1:length(tt)
            if isempty(tt{d}) % unlabeled
                tp(d) = -1;
            elseif sum(tt{d})>=48 & sum(tt{d})<=57 % bird's syllables
                tp(d) = str2num(tt{d});
            else
                tp(d) = 103; % unknown
            end
        end
        elements{c}.segType = tp';
        elements{c}.fs = handles.fs;
        elements{c}.drugstatus = 'No Drug';
        elements{c}.drugindex = 1;
        
        for d = 1:length(handles.menu_Segmenter)
            if strcmp(get(handles.menu_Segmenter(d),'checked'),'on')
                alg = get(handles.menu_Segmenter(d),'label');
            end
        end
        elements{c}.segmentationMethod = [];
        for d = 1:length(tt)
            elements{c}.segmentationMethod(d).method = 'ElectroGui';
            elements{c}.segmentationMethod(d).segmenter = alg;
            elements{c}.segmentationMethod(d).params.Names = handles.SegmenterParams.Names;
            elements{c}.segmentationMethod(d).params.Values = handles.SegmenterParams.Values;
            elements{c}.segmentationMethod(d).thresholdAbs = handles.SoundThresholds(c);
        end
    end
    
    save([pathname syllablesfile],'elements','keys');
end



function HWChannels = get_channel(filename)
%Read a data file created by a trigger.  

%As of file format '-2', if two saving sessions are appended into the 
%same file, this function will return the first session.

%filename:  string specifing the filename of the data file.

%HWChannels:  the hardware channel numbers of the columns of the data
%matrix.

%data:  matrix in which each column contains data from the specified HW
%channel number in HWChannels.

%time:  In file format -1 and -2, column vector containing the time relative to daq_Start each row of
%                                 data was taken.
%       In file format -3: a vector containing
%       [acquisitionStartTime (6 element datevec), approxFileCreatedTime (6 element datevec), startSampTime (seconds), endSampTime (seconds), endSampNumber (integer)]

%%%%NOTE:  DO NOT CHANGE THE FILE FORMAT, 
%%%%       WITHOUT INCREMENTING THE TRIGGER FILE FORMAT ID NUMBER!!!! 

if(~exist(filename,'file'))
    error('File does not exist');
end

%Open the file
fid = fopen(filename);
%Read first element in the file which is the file format
trigFileFormat = fread(fid, 1, 'float64');

if(trigFileFormat == -4)
    
    %Read absolute clock times in datevec format, 6 number [Y,M,D,H,M,S]. 
    acquisitionStartTime = fread(fid, 6, 'float64');  %Time the daq was started.
    approxFileCreatedTime = fread(fid, 6, 'float64'); %Approximate time this file was writtin.
    
    %Read the number of hardware channels
	numHWChannels = fread(fid, 1, 'float64'); 

    %Read the hardware indices of the recorded channels.
	HWChannels = fread(fid, numHWChannels, 'float64');
    
    %close the file.
    fclose(fid);    

elseif(trigFileFormat == -3)
    
    %Read absolute clock times in datevec format, 6 number [Y,M,D,H,M,S]. 
    acquisitionStartTime = fread(fid, 6, 'float64'); %Time the daq was started.
    approxFileCreatedTime = fread(fid, 6, 'float64'); %Approximate time this file was writtin.
    
    %Read the number of hardware channels
	numHWChannels = fread(fid, 1, 'float64');

    %Read the hardware indices of the recorded channels.
	HWChannels = fread(fid, numHWChannels, 'float64');
    
    %close the file.
    fclose(fid);    
elseif(trigFileFormat == -2)
    %read remainder of file.
    data = fread(fid, inf, 'float64');
    fclose(fid);
    
	%Parse the second float64 as the number of channels
	numHWChannels = data(2);
	
	%Read the hardware indices of the recorded channels.
	HWChannels = data(3:3+numHWChannels-1);
elseif(trigFileFormat == -1)
    %read remainder of file.
    data = fread(fid, inf, 'float64');
    fclose(fid);    
    
	%Parse the second float64 as the number of channels
	numHWChannels = data(2);
	
	%Read the hardware indices of the recorded channels.
	HWChannels = data(3:3+numHWChannels-1);
else
    error(['Unknown trigger-file format:', num2str(trigFileFormat)]);
end